import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import fs from "fs/promises"

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const outfile = "main.js";
const cssOutputFilename = "styles.css";

const context = await esbuild.context({
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: "external", cssOutputFilename: "styles.css" },
			preprocess: sveltePreprocess(),
		}),
	],
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile,
});

const renameCss = async () => {
	const defaultCssOutput = outfile.replace(/\.js$/, ".css");
	try {
		await fs.rename(defaultCssOutput, cssOutputFilename);
		console.log(`CSS file renamed to ${cssOutputFilename}`);
	} catch (error) {
		console.error(`Failed to rename CSS file: ${error.message}`);
	}
};

if (prod) {
	await context.rebuild();
	await renameCss();
	process.exit(0);
} else {
	await context.watch();
	
	setInterval(async () => {
		const defaultCssOutput = outfile.replace(/\.js$/, ".css");

		try {
			await fs.rename(defaultCssOutput, cssOutputFilename);
			console.log("Css renamed");
		} catch (error) {};
	}, 1000);
}
